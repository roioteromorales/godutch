def vrs = 0.1

group 'com.roisoftstudio.godutch'
version vrs

apply plugin: 'java'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'war'

repositories {
    mavenCentral()
}

dependencies {
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'org.glassfish.jersey.core:jersey-client:2.22.2'
    compile 'org.glassfish.jersey.core:jersey-server:2.22.2'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.22.2'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.22.2'

    compile 'org.mongodb:mongo-java-driver:3.2.2'

    compile 'com.google.inject:guice:4.0'
    compile 'com.google.inject.extensions:guice-servlet:4.0'

    compile 'com.squarespace.jersey2-guice:jersey2-guice-impl:1.0.6'

    compile 'com.google.code.gson:gson:2.6.2'
    compile 'org.json:json:20160212'
    compile 'io.jsonwebtoken:jjwt:0.6.0'

    compile 'org.slf4j:slf4j-api:1.7.19'
    compile 'org.slf4j:slf4j-simple:1.7.21'

    compile 'org.apache.logging.log4j:log4j-core:2.5'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.assertj:assertj-core:3.4.0'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile 'junit:junit:4.12'
    testCompile 'com.github.kevinsawicki:http-request:6.0'


}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.5'
    }
}

test {
    exclude '**/integration/**'
}

def dockerHost = System.getenv().DOCKER_HOST
def dockerCertPath = System.getenv().DOCKER_CERT_PATH
def tomcatExternalPort = "18080"
def mongodbExternalPort = "27017"
def containerUrl = dockerHost.replace("tcp", "http").subSequence(0, dockerHost.size() - 3) + tomcatExternalPort + "/"

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

apply plugin: 'com.bmuschko.docker-remote-api'

// You need to define on the running machine the environment variables
// DOCKER_HOST = tcp://192.168.99.100:2376  (windows)
// DOCKER_CERT_PATH = C:/users/Roi/.docker/machine/machines/default (windows)

docker {
    url = dockerHost.replace("tcp", "https")
    certPath = new File(dockerCertPath)
}

task buildDBImage(type: DockerBuildImage) {
    inputDir = new File("db/")
    tag = "godutch-db"
}
task createDBContainer(type: DockerCreateContainer) {
    dependsOn buildDBImage
    targetImageId { "godutch-db:" + buildDBImage.getImageId() }
    portBindings = [mongodbExternalPort + ':27017']
}
task startDBContainer(type: DockerStartContainer) {
    dependsOn createDBContainer
    targetContainerId { createDBContainer.getContainerId() }
}
task stopDBContainer(type: DockerStopContainer) {
    targetContainerId { createDBContainer.getContainerId() }
}

/////////////////////////////////////////////////////////////

task buildAppImage(type: DockerBuildImage) {
    inputDir = project.rootDir
    tag = "godutch-app"
}

task createAppContainer(type: DockerCreateContainer) {
    dependsOn buildAppImage
    targetImageId { "godutch-app:" + buildAppImage.getImageId() }
    portBindings = [tomcatExternalPort + ':8080']
}

task startAppContainer(type: DockerStartContainer) {
    dependsOn createAppContainer
    targetContainerId { createAppContainer.getContainerId() }
}

task stopAppContainer(type: DockerStopContainer) {
    targetContainerId { createAppContainer.getContainerId() }
}

task functionalTest(type: Test) {
    dependsOn startAppContainer
    dependsOn startDBContainer
    include '**/integration/**'
    finalizedBy stopDBContainer
    finalizedBy stopAppContainer
}

task startGoDutch() {
    dependsOn startAppContainer
    dependsOn startDBContainer
    println "Application running on: " + containerUrl \
}
