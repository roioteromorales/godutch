group 'com.roisoftstudio.godutch'
version '0.1'

apply plugin: 'java'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'war'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'com.jayway.restassured:rest-assured:2.8.0'

    compile 'com.sun.jersey:jersey-server:1.13'
    compile 'com.sun.jersey:jersey-core:1.13'
    compile 'com.sun.jersey:jersey-servlet:1.13'

    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.5'
    }
}

def dockerHost = System.getenv().DOCKER_HOST
def dockerCertPath = System.getenv().DOCKER_CERT_PATH
def tomcatExternalPort = "18080"
def containerUrl = dockerHost.replace("tcp", "http").subSequence(0, dockerHost.size() - 3) + tomcatExternalPort + "/godutch-1.0/"

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

apply plugin: 'com.bmuschko.docker-remote-api'

//You need to define on the running machine the environment variables
//DOCKER_HOST = tcp://192.168.99.100:2376  (windows)
//DOCKER_CERT_PATH = C:\Users\Roi\.docker\machine\machines\default (windows)
docker {
    url = dockerHost.replace("tcp", "https")
    certPath = new File(dockerCertPath)
}

task buildImage(type: DockerBuildImage) {
    inputDir = project.rootDir
    tag = "godutch"
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId { "godutch:" + buildImage.getImageId() }
    portBindings = [tomcatExternalPort + ':8080']
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
    println "Application running on: " + containerUrl
}

task stopContainer(type: DockerStopContainer) {
    targetContainerId { createContainer.getContainerId() }
}

task functionalTest(type: Test) {
    dependsOn startContainer
    println "Start my functional Tests on the container"
    finalizedBy stopContainer
}
